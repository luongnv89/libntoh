# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libntoh', [dirname(__file__)])
        except ImportError:
            import _libntoh
            return _libntoh
        if fp is not None:
            try:
                _mod = imp.load_module('_libntoh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libntoh = swig_import_helper()
    del swig_import_helper
else:
    import _libntoh
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_libntoh.NTOH_OK_swigconstant(_libntoh)
NTOH_OK = _libntoh.NTOH_OK

_libntoh.NTOH_IP_INCORRECT_FLOW_swigconstant(_libntoh)
NTOH_IP_INCORRECT_FLOW = _libntoh.NTOH_IP_INCORRECT_FLOW

_libntoh.NTOH_INCORRECT_LENGTH_swigconstant(_libntoh)
NTOH_INCORRECT_LENGTH = _libntoh.NTOH_INCORRECT_LENGTH

_libntoh.NTOH_INCORRECT_IP_HEADER_swigconstant(_libntoh)
NTOH_INCORRECT_IP_HEADER = _libntoh.NTOH_INCORRECT_IP_HEADER

_libntoh.NTOH_INCORRECT_IP_HEADER_LENGTH_swigconstant(_libntoh)
NTOH_INCORRECT_IP_HEADER_LENGTH = _libntoh.NTOH_INCORRECT_IP_HEADER_LENGTH

_libntoh.NTOH_NOT_IPV4_swigconstant(_libntoh)
NTOH_NOT_IPV4 = _libntoh.NTOH_NOT_IPV4

_libntoh.NTOH_IP_ADDRESSES_MISMATCH_swigconstant(_libntoh)
NTOH_IP_ADDRESSES_MISMATCH = _libntoh.NTOH_IP_ADDRESSES_MISMATCH

_libntoh.NTOH_NOT_AN_IP_FRAGMENT_swigconstant(_libntoh)
NTOH_NOT_AN_IP_FRAGMENT = _libntoh.NTOH_NOT_AN_IP_FRAGMENT

_libntoh.NTOH_TOO_LOW_IP_FRAGMENT_LENGTH_swigconstant(_libntoh)
NTOH_TOO_LOW_IP_FRAGMENT_LENGTH = _libntoh.NTOH_TOO_LOW_IP_FRAGMENT_LENGTH

_libntoh.NTOH_IP_FRAGMENT_OVERRUN_swigconstant(_libntoh)
NTOH_IP_FRAGMENT_OVERRUN = _libntoh.NTOH_IP_FRAGMENT_OVERRUN

_libntoh.NTOH_MAX_IP_FRAGMENTS_REACHED_swigconstant(_libntoh)
NTOH_MAX_IP_FRAGMENTS_REACHED = _libntoh.NTOH_MAX_IP_FRAGMENTS_REACHED

_libntoh.NTOH_NOT_ENOUGH_DATA_swigconstant(_libntoh)
NTOH_NOT_ENOUGH_DATA = _libntoh.NTOH_NOT_ENOUGH_DATA

_libntoh.NTOH_NOT_IPV6_swigconstant(_libntoh)
NTOH_NOT_IPV6 = _libntoh.NTOH_NOT_IPV6

_libntoh.NTOH_INCORRECT_SESSION_swigconstant(_libntoh)
NTOH_INCORRECT_SESSION = _libntoh.NTOH_INCORRECT_SESSION

_libntoh.NTOH_INCORRECT_TCP_HEADER_LENGTH_swigconstant(_libntoh)
NTOH_INCORRECT_TCP_HEADER_LENGTH = _libntoh.NTOH_INCORRECT_TCP_HEADER_LENGTH

_libntoh.NTOH_TCP_PORTS_MISMATCH_swigconstant(_libntoh)
NTOH_TCP_PORTS_MISMATCH = _libntoh.NTOH_TCP_PORTS_MISMATCH

_libntoh.NTOH_INVALID_FLAGS_swigconstant(_libntoh)
NTOH_INVALID_FLAGS = _libntoh.NTOH_INVALID_FLAGS

_libntoh.NTOH_TOO_LOW_SEQ_NUMBER_swigconstant(_libntoh)
NTOH_TOO_LOW_SEQ_NUMBER = _libntoh.NTOH_TOO_LOW_SEQ_NUMBER

_libntoh.NTOH_TOO_LOW_ACK_NUMBER_swigconstant(_libntoh)
NTOH_TOO_LOW_ACK_NUMBER = _libntoh.NTOH_TOO_LOW_ACK_NUMBER

_libntoh.NTOH_PAWS_FAILED_swigconstant(_libntoh)
NTOH_PAWS_FAILED = _libntoh.NTOH_PAWS_FAILED

_libntoh.NTOH_HANDSHAKE_FAILED_swigconstant(_libntoh)
NTOH_HANDSHAKE_FAILED = _libntoh.NTOH_HANDSHAKE_FAILED

_libntoh.NTOH_MAX_SYN_RETRIES_REACHED_swigconstant(_libntoh)
NTOH_MAX_SYN_RETRIES_REACHED = _libntoh.NTOH_MAX_SYN_RETRIES_REACHED

_libntoh.NTOH_MAX_SYNACK_RETRIES_REACHED_swigconstant(_libntoh)
NTOH_MAX_SYNACK_RETRIES_REACHED = _libntoh.NTOH_MAX_SYNACK_RETRIES_REACHED

_libntoh.NTOH_NO_WINDOW_SPACE_LEFT_swigconstant(_libntoh)
NTOH_NO_WINDOW_SPACE_LEFT = _libntoh.NTOH_NO_WINDOW_SPACE_LEFT

_libntoh.NTOH_NOT_TCP_swigconstant(_libntoh)
NTOH_NOT_TCP = _libntoh.NTOH_NOT_TCP

_libntoh.NTOH_SYNCHRONIZING_swigconstant(_libntoh)
NTOH_SYNCHRONIZING = _libntoh.NTOH_SYNCHRONIZING

_libntoh.NTOH_NOT_INITIALIZED_swigconstant(_libntoh)
NTOH_NOT_INITIALIZED = _libntoh.NTOH_NOT_INITIALIZED

_libntoh.NTOH_REASON_HSFAILED_swigconstant(_libntoh)
NTOH_REASON_HSFAILED = _libntoh.NTOH_REASON_HSFAILED

_libntoh.NTOH_REASON_ESTABLISHED_swigconstant(_libntoh)
NTOH_REASON_ESTABLISHED = _libntoh.NTOH_REASON_ESTABLISHED

_libntoh.NTOH_REASON_DATA_swigconstant(_libntoh)
NTOH_REASON_DATA = _libntoh.NTOH_REASON_DATA

_libntoh.NTOH_REASON_CLOSED_swigconstant(_libntoh)
NTOH_REASON_CLOSED = _libntoh.NTOH_REASON_CLOSED

_libntoh.NTOH_REASON_TIMEDOUT_swigconstant(_libntoh)
NTOH_REASON_TIMEDOUT = _libntoh.NTOH_REASON_TIMEDOUT

_libntoh.NTOH_REASON_EXIT_swigconstant(_libntoh)
NTOH_REASON_EXIT = _libntoh.NTOH_REASON_EXIT

_libntoh.NTOH_REASON_OOO_swigconstant(_libntoh)
NTOH_REASON_OOO = _libntoh.NTOH_REASON_OOO

_libntoh.NTOH_REASON_XXX_swigconstant(_libntoh)
NTOH_REASON_XXX = _libntoh.NTOH_REASON_XXX

_libntoh.NTOH_REASON_MAX_SYN_RETRIES_REACHED_swigconstant(_libntoh)
NTOH_REASON_MAX_SYN_RETRIES_REACHED = _libntoh.NTOH_REASON_MAX_SYN_RETRIES_REACHED

_libntoh.NTOH_REASON_MAX_SYNACK_RETRIES_REACHED_swigconstant(_libntoh)
NTOH_REASON_MAX_SYNACK_RETRIES_REACHED = _libntoh.NTOH_REASON_MAX_SYNACK_RETRIES_REACHED

_libntoh.NTOH_REASON_SYNC_swigconstant(_libntoh)
NTOH_REASON_SYNC = _libntoh.NTOH_REASON_SYNC

_libntoh.NTOH_REASON_NOWINDOW_swigconstant(_libntoh)
NTOH_REASON_NOWINDOW = _libntoh.NTOH_REASON_NOWINDOW

_libntoh.NTOH_REASON_DEFRAGMENTED_DATAGRAM_swigconstant(_libntoh)
NTOH_REASON_DEFRAGMENTED_DATAGRAM = _libntoh.NTOH_REASON_DEFRAGMENTED_DATAGRAM

_libntoh.NTOH_REASON_TIMEDOUT_FRAGMENTS_swigconstant(_libntoh)
NTOH_REASON_TIMEDOUT_FRAGMENTS = _libntoh.NTOH_REASON_TIMEDOUT_FRAGMENTS

_libntoh.NTOH_ERROR_NOMEM_swigconstant(_libntoh)
NTOH_ERROR_NOMEM = _libntoh.NTOH_ERROR_NOMEM

_libntoh.NTOH_ERROR_NOSPACE_swigconstant(_libntoh)
NTOH_ERROR_NOSPACE = _libntoh.NTOH_ERROR_NOSPACE

_libntoh.NTOH_ERROR_NOKEY_swigconstant(_libntoh)
NTOH_ERROR_NOKEY = _libntoh.NTOH_ERROR_NOKEY

_libntoh.NTOH_ERROR_NOFUNCTION_swigconstant(_libntoh)
NTOH_ERROR_NOFUNCTION = _libntoh.NTOH_ERROR_NOFUNCTION

_libntoh.NTOH_ERROR_INVALID_TUPLE5_swigconstant(_libntoh)
NTOH_ERROR_INVALID_TUPLE5 = _libntoh.NTOH_ERROR_INVALID_TUPLE5

_libntoh.NTOH_ERROR_PARAMS_swigconstant(_libntoh)
NTOH_ERROR_PARAMS = _libntoh.NTOH_ERROR_PARAMS

_libntoh.NTOH_ERROR_INIT_swigconstant(_libntoh)
NTOH_ERROR_INIT = _libntoh.NTOH_ERROR_INIT
class ntoh_lock_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_lock_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_lock_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mutex"] = _libntoh.ntoh_lock_t_mutex_set
    __swig_getmethods__["mutex"] = _libntoh.ntoh_lock_t_mutex_get
    if _newclass:
        mutex = _swig_property(_libntoh.ntoh_lock_t_mutex_get, _libntoh.ntoh_lock_t_mutex_set)
    __swig_setmethods__["pcond"] = _libntoh.ntoh_lock_t_pcond_set
    __swig_getmethods__["pcond"] = _libntoh.ntoh_lock_t_pcond_get
    if _newclass:
        pcond = _swig_property(_libntoh.ntoh_lock_t_pcond_get, _libntoh.ntoh_lock_t_pcond_set)
    __swig_setmethods__["use"] = _libntoh.ntoh_lock_t_use_set
    __swig_getmethods__["use"] = _libntoh.ntoh_lock_t_use_get
    if _newclass:
        use = _swig_property(_libntoh.ntoh_lock_t_use_get, _libntoh.ntoh_lock_t_use_set)

    def __init__(self):
        this = _libntoh.new_ntoh_lock_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_lock_t
    __del__ = lambda self: None
ntoh_lock_t_swigregister = _libntoh.ntoh_lock_t_swigregister
ntoh_lock_t_swigregister(ntoh_lock_t)


def ntoh_version():
    return _libntoh.ntoh_version()
ntoh_version = _libntoh.ntoh_version

def ntoh_get_retval_desc(val):
    return _libntoh.ntoh_get_retval_desc(val)
ntoh_get_retval_desc = _libntoh.ntoh_get_retval_desc

def ntoh_get_reason(val):
    return _libntoh.ntoh_get_reason(val)
ntoh_get_reason = _libntoh.ntoh_get_reason

def ntoh_get_errdesc(val):
    return _libntoh.ntoh_get_errdesc(val)
ntoh_get_errdesc = _libntoh.ntoh_get_errdesc

def ntoh_init():
    return _libntoh.ntoh_init()
ntoh_init = _libntoh.ntoh_init

def ntoh_exit():
    return _libntoh.ntoh_exit()
ntoh_exit = _libntoh.ntoh_exit
class htnode_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, htnode_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, htnode_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.htnode_t_next_set
    __swig_getmethods__["next"] = _libntoh.htnode_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.htnode_t_next_get, _libntoh.htnode_t_next_set)
    __swig_setmethods__["val"] = _libntoh.htnode_t_val_set
    __swig_getmethods__["val"] = _libntoh.htnode_t_val_get
    if _newclass:
        val = _swig_property(_libntoh.htnode_t_val_get, _libntoh.htnode_t_val_set)
    __swig_setmethods__["key"] = _libntoh.htnode_t_key_set
    __swig_getmethods__["key"] = _libntoh.htnode_t_key_get
    if _newclass:
        key = _swig_property(_libntoh.htnode_t_key_get, _libntoh.htnode_t_key_set)

    def __init__(self):
        this = _libntoh.new_htnode_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_htnode_t
    __del__ = lambda self: None
htnode_t_swigregister = _libntoh.htnode_t_swigregister
htnode_t_swigregister(htnode_t)

class htable_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, htable_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, htable_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_size"] = _libntoh.htable_t_table_size_set
    __swig_getmethods__["table_size"] = _libntoh.htable_t_table_size_get
    if _newclass:
        table_size = _swig_property(_libntoh.htable_t_table_size_get, _libntoh.htable_t_table_size_set)
    __swig_setmethods__["table"] = _libntoh.htable_t_table_set
    __swig_getmethods__["table"] = _libntoh.htable_t_table_get
    if _newclass:
        table = _swig_property(_libntoh.htable_t_table_get, _libntoh.htable_t_table_set)

    def __init__(self):
        this = _libntoh.new_htable_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_htable_t
    __del__ = lambda self: None
htable_t_swigregister = _libntoh.htable_t_swigregister
htable_t_swigregister(htable_t)


def htable_map(size):
    return _libntoh.htable_map(size)
htable_map = _libntoh.htable_map

def htable_insert(ht, key, val):
    return _libntoh.htable_insert(ht, key, val)
htable_insert = _libntoh.htable_insert

def htable_find(ht, key, ip_tuple4):
    return _libntoh.htable_find(ht, key, ip_tuple4)
htable_find = _libntoh.htable_find

def htable_remove(ht, key, ip_tuple4):
    return _libntoh.htable_remove(ht, key, ip_tuple4)
htable_remove = _libntoh.htable_remove

def htable_count(ht):
    return _libntoh.htable_count(ht)
htable_count = _libntoh.htable_count

def htable_first(ht):
    return _libntoh.htable_first(ht)
htable_first = _libntoh.htable_first

def htable_destroy(ht):
    return _libntoh.htable_destroy(ht)
htable_destroy = _libntoh.htable_destroy

def lock_access(lock):
    return _libntoh.lock_access(lock)
lock_access = _libntoh.lock_access

def unlock_access(lock):
    return _libntoh.unlock_access(lock)
unlock_access = _libntoh.unlock_access

def free_lockaccess(lock):
    return _libntoh.free_lockaccess(lock)
free_lockaccess = _libntoh.free_lockaccess
class ntoh_ipv4_tuple4_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv4_tuple4_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv4_tuple4_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _libntoh.ntoh_ipv4_tuple4_t_source_set
    __swig_getmethods__["source"] = _libntoh.ntoh_ipv4_tuple4_t_source_get
    if _newclass:
        source = _swig_property(_libntoh.ntoh_ipv4_tuple4_t_source_get, _libntoh.ntoh_ipv4_tuple4_t_source_set)
    __swig_setmethods__["destination"] = _libntoh.ntoh_ipv4_tuple4_t_destination_set
    __swig_getmethods__["destination"] = _libntoh.ntoh_ipv4_tuple4_t_destination_get
    if _newclass:
        destination = _swig_property(_libntoh.ntoh_ipv4_tuple4_t_destination_get, _libntoh.ntoh_ipv4_tuple4_t_destination_set)
    __swig_setmethods__["protocol"] = _libntoh.ntoh_ipv4_tuple4_t_protocol_set
    __swig_getmethods__["protocol"] = _libntoh.ntoh_ipv4_tuple4_t_protocol_get
    if _newclass:
        protocol = _swig_property(_libntoh.ntoh_ipv4_tuple4_t_protocol_get, _libntoh.ntoh_ipv4_tuple4_t_protocol_set)
    __swig_setmethods__["id"] = _libntoh.ntoh_ipv4_tuple4_t_id_set
    __swig_getmethods__["id"] = _libntoh.ntoh_ipv4_tuple4_t_id_get
    if _newclass:
        id = _swig_property(_libntoh.ntoh_ipv4_tuple4_t_id_get, _libntoh.ntoh_ipv4_tuple4_t_id_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv4_tuple4_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv4_tuple4_t
    __del__ = lambda self: None
ntoh_ipv4_tuple4_t_swigregister = _libntoh.ntoh_ipv4_tuple4_t_swigregister
ntoh_ipv4_tuple4_t_swigregister(ntoh_ipv4_tuple4_t)

class ntoh_ipv4_fragment_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv4_fragment_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv4_fragment_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_ipv4_fragment_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_ipv4_fragment_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_ipv4_fragment_t_next_get, _libntoh.ntoh_ipv4_fragment_t_next_set)
    __swig_setmethods__["offset"] = _libntoh.ntoh_ipv4_fragment_t_offset_set
    __swig_getmethods__["offset"] = _libntoh.ntoh_ipv4_fragment_t_offset_get
    if _newclass:
        offset = _swig_property(_libntoh.ntoh_ipv4_fragment_t_offset_get, _libntoh.ntoh_ipv4_fragment_t_offset_set)
    __swig_setmethods__["len"] = _libntoh.ntoh_ipv4_fragment_t_len_set
    __swig_getmethods__["len"] = _libntoh.ntoh_ipv4_fragment_t_len_get
    if _newclass:
        len = _swig_property(_libntoh.ntoh_ipv4_fragment_t_len_get, _libntoh.ntoh_ipv4_fragment_t_len_set)
    __swig_setmethods__["data"] = _libntoh.ntoh_ipv4_fragment_t_data_set
    __swig_getmethods__["data"] = _libntoh.ntoh_ipv4_fragment_t_data_get
    if _newclass:
        data = _swig_property(_libntoh.ntoh_ipv4_fragment_t_data_get, _libntoh.ntoh_ipv4_fragment_t_data_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv4_fragment_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv4_fragment_t
    __del__ = lambda self: None
ntoh_ipv4_fragment_t_swigregister = _libntoh.ntoh_ipv4_fragment_t_swigregister
ntoh_ipv4_fragment_t_swigregister(ntoh_ipv4_fragment_t)

class ntoh_ipv4_flow_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv4_flow_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv4_flow_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ident"] = _libntoh.ntoh_ipv4_flow_t_ident_set
    __swig_getmethods__["ident"] = _libntoh.ntoh_ipv4_flow_t_ident_get
    if _newclass:
        ident = _swig_property(_libntoh.ntoh_ipv4_flow_t_ident_get, _libntoh.ntoh_ipv4_flow_t_ident_set)
    __swig_setmethods__["key"] = _libntoh.ntoh_ipv4_flow_t_key_set
    __swig_getmethods__["key"] = _libntoh.ntoh_ipv4_flow_t_key_get
    if _newclass:
        key = _swig_property(_libntoh.ntoh_ipv4_flow_t_key_get, _libntoh.ntoh_ipv4_flow_t_key_set)
    __swig_setmethods__["fragments"] = _libntoh.ntoh_ipv4_flow_t_fragments_set
    __swig_getmethods__["fragments"] = _libntoh.ntoh_ipv4_flow_t_fragments_get
    if _newclass:
        fragments = _swig_property(_libntoh.ntoh_ipv4_flow_t_fragments_get, _libntoh.ntoh_ipv4_flow_t_fragments_set)
    __swig_setmethods__["meat"] = _libntoh.ntoh_ipv4_flow_t_meat_set
    __swig_getmethods__["meat"] = _libntoh.ntoh_ipv4_flow_t_meat_get
    if _newclass:
        meat = _swig_property(_libntoh.ntoh_ipv4_flow_t_meat_get, _libntoh.ntoh_ipv4_flow_t_meat_set)
    __swig_setmethods__["total"] = _libntoh.ntoh_ipv4_flow_t_total_set
    __swig_getmethods__["total"] = _libntoh.ntoh_ipv4_flow_t_total_get
    if _newclass:
        total = _swig_property(_libntoh.ntoh_ipv4_flow_t_total_get, _libntoh.ntoh_ipv4_flow_t_total_set)
    __swig_setmethods__["final_iphdr"] = _libntoh.ntoh_ipv4_flow_t_final_iphdr_set
    __swig_getmethods__["final_iphdr"] = _libntoh.ntoh_ipv4_flow_t_final_iphdr_get
    if _newclass:
        final_iphdr = _swig_property(_libntoh.ntoh_ipv4_flow_t_final_iphdr_get, _libntoh.ntoh_ipv4_flow_t_final_iphdr_set)
    __swig_setmethods__["function"] = _libntoh.ntoh_ipv4_flow_t_function_set
    __swig_getmethods__["function"] = _libntoh.ntoh_ipv4_flow_t_function_get
    if _newclass:
        function = _swig_property(_libntoh.ntoh_ipv4_flow_t_function_get, _libntoh.ntoh_ipv4_flow_t_function_set)
    __swig_setmethods__["last_activ"] = _libntoh.ntoh_ipv4_flow_t_last_activ_set
    __swig_getmethods__["last_activ"] = _libntoh.ntoh_ipv4_flow_t_last_activ_get
    if _newclass:
        last_activ = _swig_property(_libntoh.ntoh_ipv4_flow_t_last_activ_get, _libntoh.ntoh_ipv4_flow_t_last_activ_set)
    __swig_setmethods__["udata"] = _libntoh.ntoh_ipv4_flow_t_udata_set
    __swig_getmethods__["udata"] = _libntoh.ntoh_ipv4_flow_t_udata_get
    if _newclass:
        udata = _swig_property(_libntoh.ntoh_ipv4_flow_t_udata_get, _libntoh.ntoh_ipv4_flow_t_udata_set)
    __swig_setmethods__["lock"] = _libntoh.ntoh_ipv4_flow_t_lock_set
    __swig_getmethods__["lock"] = _libntoh.ntoh_ipv4_flow_t_lock_get
    if _newclass:
        lock = _swig_property(_libntoh.ntoh_ipv4_flow_t_lock_get, _libntoh.ntoh_ipv4_flow_t_lock_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv4_flow_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv4_flow_t
    __del__ = lambda self: None
ntoh_ipv4_flow_t_swigregister = _libntoh.ntoh_ipv4_flow_t_swigregister
ntoh_ipv4_flow_t_swigregister(ntoh_ipv4_flow_t)

class ntoh_ipv4_session_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv4_session_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv4_session_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_ipv4_session_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_ipv4_session_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_ipv4_session_t_next_get, _libntoh.ntoh_ipv4_session_t_next_set)
    __swig_setmethods__["max_flows"] = _libntoh.ntoh_ipv4_session_t_max_flows_set
    __swig_getmethods__["max_flows"] = _libntoh.ntoh_ipv4_session_t_max_flows_get
    if _newclass:
        max_flows = _swig_property(_libntoh.ntoh_ipv4_session_t_max_flows_get, _libntoh.ntoh_ipv4_session_t_max_flows_set)
    __swig_setmethods__["max_fragments"] = _libntoh.ntoh_ipv4_session_t_max_fragments_set
    __swig_getmethods__["max_fragments"] = _libntoh.ntoh_ipv4_session_t_max_fragments_get
    if _newclass:
        max_fragments = _swig_property(_libntoh.ntoh_ipv4_session_t_max_fragments_get, _libntoh.ntoh_ipv4_session_t_max_fragments_set)
    __swig_setmethods__["flows"] = _libntoh.ntoh_ipv4_session_t_flows_set
    __swig_getmethods__["flows"] = _libntoh.ntoh_ipv4_session_t_flows_get
    if _newclass:
        flows = _swig_property(_libntoh.ntoh_ipv4_session_t_flows_get, _libntoh.ntoh_ipv4_session_t_flows_set)
    __swig_setmethods__["tID"] = _libntoh.ntoh_ipv4_session_t_tID_set
    __swig_getmethods__["tID"] = _libntoh.ntoh_ipv4_session_t_tID_get
    if _newclass:
        tID = _swig_property(_libntoh.ntoh_ipv4_session_t_tID_get, _libntoh.ntoh_ipv4_session_t_tID_set)
    __swig_setmethods__["lock"] = _libntoh.ntoh_ipv4_session_t_lock_set
    __swig_getmethods__["lock"] = _libntoh.ntoh_ipv4_session_t_lock_get
    if _newclass:
        lock = _swig_property(_libntoh.ntoh_ipv4_session_t_lock_get, _libntoh.ntoh_ipv4_session_t_lock_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv4_session_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv4_session_t
    __del__ = lambda self: None
ntoh_ipv4_session_t_swigregister = _libntoh.ntoh_ipv4_session_t_swigregister
ntoh_ipv4_session_t_swigregister(ntoh_ipv4_session_t)


_libntoh.MIN_IPV4_FRAGMENT_LENGTH_swigconstant(_libntoh)
MIN_IPV4_FRAGMENT_LENGTH = _libntoh.MIN_IPV4_FRAGMENT_LENGTH

_libntoh.MAX_IPV4_DATAGRAM_LENGTH_swigconstant(_libntoh)
MAX_IPV4_DATAGRAM_LENGTH = _libntoh.MAX_IPV4_DATAGRAM_LENGTH

_libntoh.DEFAULT_IPV4_FRAGMENT_TIMEOUT_swigconstant(_libntoh)
DEFAULT_IPV4_FRAGMENT_TIMEOUT = _libntoh.DEFAULT_IPV4_FRAGMENT_TIMEOUT

_libntoh.DEFAULT_IPV4_MAX_FLOWS_swigconstant(_libntoh)
DEFAULT_IPV4_MAX_FLOWS = _libntoh.DEFAULT_IPV4_MAX_FLOWS

def ntoh_ipv4_init():
    return _libntoh.ntoh_ipv4_init()
ntoh_ipv4_init = _libntoh.ntoh_ipv4_init

def ntoh_ipv4_exit():
    return _libntoh.ntoh_ipv4_exit()
ntoh_ipv4_exit = _libntoh.ntoh_ipv4_exit

def ntoh_ipv4_free_session(session):
    return _libntoh.ntoh_ipv4_free_session(session)
ntoh_ipv4_free_session = _libntoh.ntoh_ipv4_free_session

def ntoh_ipv4_new_session(max_flows, max_mem, error):
    return _libntoh.ntoh_ipv4_new_session(max_flows, max_mem, error)
ntoh_ipv4_new_session = _libntoh.ntoh_ipv4_new_session

def ntoh_ipv4_find_flow(session, tuple4):
    return _libntoh.ntoh_ipv4_find_flow(session, tuple4)
ntoh_ipv4_find_flow = _libntoh.ntoh_ipv4_find_flow

def ntoh_ipv4_new_flow(session, tuple4, function, udata, error):
    return _libntoh.ntoh_ipv4_new_flow(session, tuple4, function, udata, error)
ntoh_ipv4_new_flow = _libntoh.ntoh_ipv4_new_flow

def ntoh_ipv4_free_flow(session, flow, reason):
    return _libntoh.ntoh_ipv4_free_flow(session, flow, reason)
ntoh_ipv4_free_flow = _libntoh.ntoh_ipv4_free_flow

def ntoh_ipv4_add_fragment(session, flow, iphdr, len):
    return _libntoh.ntoh_ipv4_add_fragment(session, flow, iphdr, len)
ntoh_ipv4_add_fragment = _libntoh.ntoh_ipv4_add_fragment

def ntoh_ipv4_count_flows(session):
    return _libntoh.ntoh_ipv4_count_flows(session)
ntoh_ipv4_count_flows = _libntoh.ntoh_ipv4_count_flows

def ntoh_ipv4_get_size(session):
    return _libntoh.ntoh_ipv4_get_size(session)
ntoh_ipv4_get_size = _libntoh.ntoh_ipv4_get_size

def ntoh_ipv4_get_tuple4(ip, tuple):
    return _libntoh.ntoh_ipv4_get_tuple4(ip, tuple)
ntoh_ipv4_get_tuple4 = _libntoh.ntoh_ipv4_get_tuple4
class ntoh_ipv6_tuple4_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv6_tuple4_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv6_tuple4_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _libntoh.ntoh_ipv6_tuple4_t_source_set
    __swig_getmethods__["source"] = _libntoh.ntoh_ipv6_tuple4_t_source_get
    if _newclass:
        source = _swig_property(_libntoh.ntoh_ipv6_tuple4_t_source_get, _libntoh.ntoh_ipv6_tuple4_t_source_set)
    __swig_setmethods__["destination"] = _libntoh.ntoh_ipv6_tuple4_t_destination_set
    __swig_getmethods__["destination"] = _libntoh.ntoh_ipv6_tuple4_t_destination_get
    if _newclass:
        destination = _swig_property(_libntoh.ntoh_ipv6_tuple4_t_destination_get, _libntoh.ntoh_ipv6_tuple4_t_destination_set)
    __swig_setmethods__["protocol"] = _libntoh.ntoh_ipv6_tuple4_t_protocol_set
    __swig_getmethods__["protocol"] = _libntoh.ntoh_ipv6_tuple4_t_protocol_get
    if _newclass:
        protocol = _swig_property(_libntoh.ntoh_ipv6_tuple4_t_protocol_get, _libntoh.ntoh_ipv6_tuple4_t_protocol_set)
    __swig_setmethods__["id"] = _libntoh.ntoh_ipv6_tuple4_t_id_set
    __swig_getmethods__["id"] = _libntoh.ntoh_ipv6_tuple4_t_id_get
    if _newclass:
        id = _swig_property(_libntoh.ntoh_ipv6_tuple4_t_id_get, _libntoh.ntoh_ipv6_tuple4_t_id_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv6_tuple4_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv6_tuple4_t
    __del__ = lambda self: None
ntoh_ipv6_tuple4_t_swigregister = _libntoh.ntoh_ipv6_tuple4_t_swigregister
ntoh_ipv6_tuple4_t_swigregister(ntoh_ipv6_tuple4_t)

class ntoh_ipv6_fragment_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv6_fragment_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv6_fragment_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_ipv6_fragment_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_ipv6_fragment_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_ipv6_fragment_t_next_get, _libntoh.ntoh_ipv6_fragment_t_next_set)
    __swig_setmethods__["offset"] = _libntoh.ntoh_ipv6_fragment_t_offset_set
    __swig_getmethods__["offset"] = _libntoh.ntoh_ipv6_fragment_t_offset_get
    if _newclass:
        offset = _swig_property(_libntoh.ntoh_ipv6_fragment_t_offset_get, _libntoh.ntoh_ipv6_fragment_t_offset_set)
    __swig_setmethods__["len"] = _libntoh.ntoh_ipv6_fragment_t_len_set
    __swig_getmethods__["len"] = _libntoh.ntoh_ipv6_fragment_t_len_get
    if _newclass:
        len = _swig_property(_libntoh.ntoh_ipv6_fragment_t_len_get, _libntoh.ntoh_ipv6_fragment_t_len_set)
    __swig_setmethods__["data"] = _libntoh.ntoh_ipv6_fragment_t_data_set
    __swig_getmethods__["data"] = _libntoh.ntoh_ipv6_fragment_t_data_get
    if _newclass:
        data = _swig_property(_libntoh.ntoh_ipv6_fragment_t_data_get, _libntoh.ntoh_ipv6_fragment_t_data_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv6_fragment_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv6_fragment_t
    __del__ = lambda self: None
ntoh_ipv6_fragment_t_swigregister = _libntoh.ntoh_ipv6_fragment_t_swigregister
ntoh_ipv6_fragment_t_swigregister(ntoh_ipv6_fragment_t)

class ntoh_ipv6_flow_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv6_flow_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv6_flow_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ident"] = _libntoh.ntoh_ipv6_flow_t_ident_set
    __swig_getmethods__["ident"] = _libntoh.ntoh_ipv6_flow_t_ident_get
    if _newclass:
        ident = _swig_property(_libntoh.ntoh_ipv6_flow_t_ident_get, _libntoh.ntoh_ipv6_flow_t_ident_set)
    __swig_setmethods__["key"] = _libntoh.ntoh_ipv6_flow_t_key_set
    __swig_getmethods__["key"] = _libntoh.ntoh_ipv6_flow_t_key_get
    if _newclass:
        key = _swig_property(_libntoh.ntoh_ipv6_flow_t_key_get, _libntoh.ntoh_ipv6_flow_t_key_set)
    __swig_setmethods__["fragments"] = _libntoh.ntoh_ipv6_flow_t_fragments_set
    __swig_getmethods__["fragments"] = _libntoh.ntoh_ipv6_flow_t_fragments_get
    if _newclass:
        fragments = _swig_property(_libntoh.ntoh_ipv6_flow_t_fragments_get, _libntoh.ntoh_ipv6_flow_t_fragments_set)
    __swig_setmethods__["meat"] = _libntoh.ntoh_ipv6_flow_t_meat_set
    __swig_getmethods__["meat"] = _libntoh.ntoh_ipv6_flow_t_meat_get
    if _newclass:
        meat = _swig_property(_libntoh.ntoh_ipv6_flow_t_meat_get, _libntoh.ntoh_ipv6_flow_t_meat_set)
    __swig_setmethods__["total"] = _libntoh.ntoh_ipv6_flow_t_total_set
    __swig_getmethods__["total"] = _libntoh.ntoh_ipv6_flow_t_total_get
    if _newclass:
        total = _swig_property(_libntoh.ntoh_ipv6_flow_t_total_get, _libntoh.ntoh_ipv6_flow_t_total_set)
    __swig_setmethods__["final_iphdr"] = _libntoh.ntoh_ipv6_flow_t_final_iphdr_set
    __swig_getmethods__["final_iphdr"] = _libntoh.ntoh_ipv6_flow_t_final_iphdr_get
    if _newclass:
        final_iphdr = _swig_property(_libntoh.ntoh_ipv6_flow_t_final_iphdr_get, _libntoh.ntoh_ipv6_flow_t_final_iphdr_set)
    __swig_setmethods__["function"] = _libntoh.ntoh_ipv6_flow_t_function_set
    __swig_getmethods__["function"] = _libntoh.ntoh_ipv6_flow_t_function_get
    if _newclass:
        function = _swig_property(_libntoh.ntoh_ipv6_flow_t_function_get, _libntoh.ntoh_ipv6_flow_t_function_set)
    __swig_setmethods__["last_activ"] = _libntoh.ntoh_ipv6_flow_t_last_activ_set
    __swig_getmethods__["last_activ"] = _libntoh.ntoh_ipv6_flow_t_last_activ_get
    if _newclass:
        last_activ = _swig_property(_libntoh.ntoh_ipv6_flow_t_last_activ_get, _libntoh.ntoh_ipv6_flow_t_last_activ_set)
    __swig_setmethods__["udata"] = _libntoh.ntoh_ipv6_flow_t_udata_set
    __swig_getmethods__["udata"] = _libntoh.ntoh_ipv6_flow_t_udata_get
    if _newclass:
        udata = _swig_property(_libntoh.ntoh_ipv6_flow_t_udata_get, _libntoh.ntoh_ipv6_flow_t_udata_set)
    __swig_setmethods__["lock"] = _libntoh.ntoh_ipv6_flow_t_lock_set
    __swig_getmethods__["lock"] = _libntoh.ntoh_ipv6_flow_t_lock_get
    if _newclass:
        lock = _swig_property(_libntoh.ntoh_ipv6_flow_t_lock_get, _libntoh.ntoh_ipv6_flow_t_lock_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv6_flow_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv6_flow_t
    __del__ = lambda self: None
ntoh_ipv6_flow_t_swigregister = _libntoh.ntoh_ipv6_flow_t_swigregister
ntoh_ipv6_flow_t_swigregister(ntoh_ipv6_flow_t)

class ntoh_ipv6_session_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_ipv6_session_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_ipv6_session_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_ipv6_session_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_ipv6_session_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_ipv6_session_t_next_get, _libntoh.ntoh_ipv6_session_t_next_set)
    __swig_setmethods__["max_flows"] = _libntoh.ntoh_ipv6_session_t_max_flows_set
    __swig_getmethods__["max_flows"] = _libntoh.ntoh_ipv6_session_t_max_flows_get
    if _newclass:
        max_flows = _swig_property(_libntoh.ntoh_ipv6_session_t_max_flows_get, _libntoh.ntoh_ipv6_session_t_max_flows_set)
    __swig_setmethods__["max_fragments"] = _libntoh.ntoh_ipv6_session_t_max_fragments_set
    __swig_getmethods__["max_fragments"] = _libntoh.ntoh_ipv6_session_t_max_fragments_get
    if _newclass:
        max_fragments = _swig_property(_libntoh.ntoh_ipv6_session_t_max_fragments_get, _libntoh.ntoh_ipv6_session_t_max_fragments_set)
    __swig_setmethods__["flows"] = _libntoh.ntoh_ipv6_session_t_flows_set
    __swig_getmethods__["flows"] = _libntoh.ntoh_ipv6_session_t_flows_get
    if _newclass:
        flows = _swig_property(_libntoh.ntoh_ipv6_session_t_flows_get, _libntoh.ntoh_ipv6_session_t_flows_set)
    __swig_setmethods__["tID"] = _libntoh.ntoh_ipv6_session_t_tID_set
    __swig_getmethods__["tID"] = _libntoh.ntoh_ipv6_session_t_tID_get
    if _newclass:
        tID = _swig_property(_libntoh.ntoh_ipv6_session_t_tID_get, _libntoh.ntoh_ipv6_session_t_tID_set)
    __swig_setmethods__["lock"] = _libntoh.ntoh_ipv6_session_t_lock_set
    __swig_getmethods__["lock"] = _libntoh.ntoh_ipv6_session_t_lock_get
    if _newclass:
        lock = _swig_property(_libntoh.ntoh_ipv6_session_t_lock_get, _libntoh.ntoh_ipv6_session_t_lock_set)

    def __init__(self):
        this = _libntoh.new_ntoh_ipv6_session_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_ipv6_session_t
    __del__ = lambda self: None
ntoh_ipv6_session_t_swigregister = _libntoh.ntoh_ipv6_session_t_swigregister
ntoh_ipv6_session_t_swigregister(ntoh_ipv6_session_t)


_libntoh.MIN_IPV6_FRAGMENT_LENGTH_swigconstant(_libntoh)
MIN_IPV6_FRAGMENT_LENGTH = _libntoh.MIN_IPV6_FRAGMENT_LENGTH

_libntoh.MAX_IPV6_DATAGRAM_LENGTH_swigconstant(_libntoh)
MAX_IPV6_DATAGRAM_LENGTH = _libntoh.MAX_IPV6_DATAGRAM_LENGTH

_libntoh.DEFAULT_IPV6_FRAGMENT_TIMEOUT_swigconstant(_libntoh)
DEFAULT_IPV6_FRAGMENT_TIMEOUT = _libntoh.DEFAULT_IPV6_FRAGMENT_TIMEOUT

_libntoh.DEFAULT_IPV6_MAX_FLOWS_swigconstant(_libntoh)
DEFAULT_IPV6_MAX_FLOWS = _libntoh.DEFAULT_IPV6_MAX_FLOWS

def ntoh_ipv6_init():
    return _libntoh.ntoh_ipv6_init()
ntoh_ipv6_init = _libntoh.ntoh_ipv6_init

def ntoh_ipv6_exit():
    return _libntoh.ntoh_ipv6_exit()
ntoh_ipv6_exit = _libntoh.ntoh_ipv6_exit

def ntoh_ipv6_free_session(session):
    return _libntoh.ntoh_ipv6_free_session(session)
ntoh_ipv6_free_session = _libntoh.ntoh_ipv6_free_session

def ntoh_ipv6_new_session(max_flows, max_mem, error):
    return _libntoh.ntoh_ipv6_new_session(max_flows, max_mem, error)
ntoh_ipv6_new_session = _libntoh.ntoh_ipv6_new_session

def ntoh_ipv6_find_flow(session, tuple4):
    return _libntoh.ntoh_ipv6_find_flow(session, tuple4)
ntoh_ipv6_find_flow = _libntoh.ntoh_ipv6_find_flow

def ntoh_ipv6_new_flow(session, tuple4, function, udata, error):
    return _libntoh.ntoh_ipv6_new_flow(session, tuple4, function, udata, error)
ntoh_ipv6_new_flow = _libntoh.ntoh_ipv6_new_flow

def ntoh_ipv6_free_flow(session, flow, reason):
    return _libntoh.ntoh_ipv6_free_flow(session, flow, reason)
ntoh_ipv6_free_flow = _libntoh.ntoh_ipv6_free_flow

def ntoh_ipv6_add_fragment(session, flow, iphdr, len):
    return _libntoh.ntoh_ipv6_add_fragment(session, flow, iphdr, len)
ntoh_ipv6_add_fragment = _libntoh.ntoh_ipv6_add_fragment

def ntoh_ipv6_count_flows(session):
    return _libntoh.ntoh_ipv6_count_flows(session)
ntoh_ipv6_count_flows = _libntoh.ntoh_ipv6_count_flows

def ntoh_ipv6_get_size(session):
    return _libntoh.ntoh_ipv6_get_size(session)
ntoh_ipv6_get_size = _libntoh.ntoh_ipv6_get_size

def ntoh_ipv6_get_tuple4(ip, tuple):
    return _libntoh.ntoh_ipv6_get_tuple4(ip, tuple)
ntoh_ipv6_get_tuple4 = _libntoh.ntoh_ipv6_get_tuple4

def sfhash_3words(a, b, c, initval):
    return _libntoh.sfhash_3words(a, b, c, initval)
sfhash_3words = _libntoh.sfhash_3words

_libntoh.NTOH_STATUS_CLOSED_swigconstant(_libntoh)
NTOH_STATUS_CLOSED = _libntoh.NTOH_STATUS_CLOSED

_libntoh.NTOH_STATUS_LISTEN_swigconstant(_libntoh)
NTOH_STATUS_LISTEN = _libntoh.NTOH_STATUS_LISTEN

_libntoh.NTOH_STATUS_SYNSENT_swigconstant(_libntoh)
NTOH_STATUS_SYNSENT = _libntoh.NTOH_STATUS_SYNSENT

_libntoh.NTOH_STATUS_SYNRCV_swigconstant(_libntoh)
NTOH_STATUS_SYNRCV = _libntoh.NTOH_STATUS_SYNRCV

_libntoh.NTOH_STATUS_ESTABLISHED_swigconstant(_libntoh)
NTOH_STATUS_ESTABLISHED = _libntoh.NTOH_STATUS_ESTABLISHED

_libntoh.NTOH_STATUS_CLOSING_swigconstant(_libntoh)
NTOH_STATUS_CLOSING = _libntoh.NTOH_STATUS_CLOSING

_libntoh.NTOH_STATUS_CLOSEWAIT_swigconstant(_libntoh)
NTOH_STATUS_CLOSEWAIT = _libntoh.NTOH_STATUS_CLOSEWAIT

_libntoh.NTOH_STATUS_FINWAIT1_swigconstant(_libntoh)
NTOH_STATUS_FINWAIT1 = _libntoh.NTOH_STATUS_FINWAIT1

_libntoh.NTOH_STATUS_FINWAIT2_swigconstant(_libntoh)
NTOH_STATUS_FINWAIT2 = _libntoh.NTOH_STATUS_FINWAIT2

_libntoh.NTOH_STATUS_LASTACK_swigconstant(_libntoh)
NTOH_STATUS_LASTACK = _libntoh.NTOH_STATUS_LASTACK

_libntoh.NTOH_STATUS_TIMEWAIT_swigconstant(_libntoh)
NTOH_STATUS_TIMEWAIT = _libntoh.NTOH_STATUS_TIMEWAIT

_libntoh.NTOH_CLOSEDBY_UNKNOWN_swigconstant(_libntoh)
NTOH_CLOSEDBY_UNKNOWN = _libntoh.NTOH_CLOSEDBY_UNKNOWN

_libntoh.NTOH_CLOSEDBY_CLIENT_swigconstant(_libntoh)
NTOH_CLOSEDBY_CLIENT = _libntoh.NTOH_CLOSEDBY_CLIENT

_libntoh.NTOH_CLOSEDBY_SERVER_swigconstant(_libntoh)
NTOH_CLOSEDBY_SERVER = _libntoh.NTOH_CLOSEDBY_SERVER

_libntoh.NTOH_SENT_BY_CLIENT_swigconstant(_libntoh)
NTOH_SENT_BY_CLIENT = _libntoh.NTOH_SENT_BY_CLIENT

_libntoh.NTOH_SENT_BY_SERVER_swigconstant(_libntoh)
NTOH_SENT_BY_SERVER = _libntoh.NTOH_SENT_BY_SERVER

_libntoh.NTOH_CHECK_TCP_SYNSENT_TIMEOUT_swigconstant(_libntoh)
NTOH_CHECK_TCP_SYNSENT_TIMEOUT = _libntoh.NTOH_CHECK_TCP_SYNSENT_TIMEOUT

_libntoh.NTOH_CHECK_TCP_SYNRCV_TIMEOUT_swigconstant(_libntoh)
NTOH_CHECK_TCP_SYNRCV_TIMEOUT = _libntoh.NTOH_CHECK_TCP_SYNRCV_TIMEOUT

_libntoh.NTOH_CHECK_TCP_ESTABLISHED_TIMEOUT_swigconstant(_libntoh)
NTOH_CHECK_TCP_ESTABLISHED_TIMEOUT = _libntoh.NTOH_CHECK_TCP_ESTABLISHED_TIMEOUT

_libntoh.NTOH_CHECK_TCP_FINWAIT2_TIMEOUT_swigconstant(_libntoh)
NTOH_CHECK_TCP_FINWAIT2_TIMEOUT = _libntoh.NTOH_CHECK_TCP_FINWAIT2_TIMEOUT

_libntoh.NTOH_CHECK_TCP_TIMEWAIT_TIMEOUT_swigconstant(_libntoh)
NTOH_CHECK_TCP_TIMEWAIT_TIMEOUT = _libntoh.NTOH_CHECK_TCP_TIMEWAIT_TIMEOUT
class ntoh_tcp_tuple5_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_tcp_tuple5_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_tcp_tuple5_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _libntoh.ntoh_tcp_tuple5_t_source_set
    __swig_getmethods__["source"] = _libntoh.ntoh_tcp_tuple5_t_source_get
    if _newclass:
        source = _swig_property(_libntoh.ntoh_tcp_tuple5_t_source_get, _libntoh.ntoh_tcp_tuple5_t_source_set)
    __swig_setmethods__["destination"] = _libntoh.ntoh_tcp_tuple5_t_destination_set
    __swig_getmethods__["destination"] = _libntoh.ntoh_tcp_tuple5_t_destination_get
    if _newclass:
        destination = _swig_property(_libntoh.ntoh_tcp_tuple5_t_destination_get, _libntoh.ntoh_tcp_tuple5_t_destination_set)
    __swig_setmethods__["sport"] = _libntoh.ntoh_tcp_tuple5_t_sport_set
    __swig_getmethods__["sport"] = _libntoh.ntoh_tcp_tuple5_t_sport_get
    if _newclass:
        sport = _swig_property(_libntoh.ntoh_tcp_tuple5_t_sport_get, _libntoh.ntoh_tcp_tuple5_t_sport_set)
    __swig_setmethods__["dport"] = _libntoh.ntoh_tcp_tuple5_t_dport_set
    __swig_getmethods__["dport"] = _libntoh.ntoh_tcp_tuple5_t_dport_get
    if _newclass:
        dport = _swig_property(_libntoh.ntoh_tcp_tuple5_t_dport_get, _libntoh.ntoh_tcp_tuple5_t_dport_set)
    __swig_setmethods__["protocol"] = _libntoh.ntoh_tcp_tuple5_t_protocol_set
    __swig_getmethods__["protocol"] = _libntoh.ntoh_tcp_tuple5_t_protocol_get
    if _newclass:
        protocol = _swig_property(_libntoh.ntoh_tcp_tuple5_t_protocol_get, _libntoh.ntoh_tcp_tuple5_t_protocol_set)

    def __init__(self):
        this = _libntoh.new_ntoh_tcp_tuple5_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_tcp_tuple5_t
    __del__ = lambda self: None
ntoh_tcp_tuple5_t_swigregister = _libntoh.ntoh_tcp_tuple5_t_swigregister
ntoh_tcp_tuple5_t_swigregister(ntoh_tcp_tuple5_t)

class ntoh_tcp_segment_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_tcp_segment_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_tcp_segment_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_tcp_segment_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_tcp_segment_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_tcp_segment_t_next_get, _libntoh.ntoh_tcp_segment_t_next_set)
    __swig_setmethods__["seq"] = _libntoh.ntoh_tcp_segment_t_seq_set
    __swig_getmethods__["seq"] = _libntoh.ntoh_tcp_segment_t_seq_get
    if _newclass:
        seq = _swig_property(_libntoh.ntoh_tcp_segment_t_seq_get, _libntoh.ntoh_tcp_segment_t_seq_set)
    __swig_setmethods__["ack"] = _libntoh.ntoh_tcp_segment_t_ack_set
    __swig_getmethods__["ack"] = _libntoh.ntoh_tcp_segment_t_ack_get
    if _newclass:
        ack = _swig_property(_libntoh.ntoh_tcp_segment_t_ack_get, _libntoh.ntoh_tcp_segment_t_ack_set)
    __swig_setmethods__["flags"] = _libntoh.ntoh_tcp_segment_t_flags_set
    __swig_getmethods__["flags"] = _libntoh.ntoh_tcp_segment_t_flags_get
    if _newclass:
        flags = _swig_property(_libntoh.ntoh_tcp_segment_t_flags_get, _libntoh.ntoh_tcp_segment_t_flags_set)
    __swig_setmethods__["payload_len"] = _libntoh.ntoh_tcp_segment_t_payload_len_set
    __swig_getmethods__["payload_len"] = _libntoh.ntoh_tcp_segment_t_payload_len_get
    if _newclass:
        payload_len = _swig_property(_libntoh.ntoh_tcp_segment_t_payload_len_get, _libntoh.ntoh_tcp_segment_t_payload_len_set)
    __swig_setmethods__["origin"] = _libntoh.ntoh_tcp_segment_t_origin_set
    __swig_getmethods__["origin"] = _libntoh.ntoh_tcp_segment_t_origin_get
    if _newclass:
        origin = _swig_property(_libntoh.ntoh_tcp_segment_t_origin_get, _libntoh.ntoh_tcp_segment_t_origin_set)
    __swig_setmethods__["tv"] = _libntoh.ntoh_tcp_segment_t_tv_set
    __swig_getmethods__["tv"] = _libntoh.ntoh_tcp_segment_t_tv_get
    if _newclass:
        tv = _swig_property(_libntoh.ntoh_tcp_segment_t_tv_get, _libntoh.ntoh_tcp_segment_t_tv_set)
    __swig_setmethods__["user_data"] = _libntoh.ntoh_tcp_segment_t_user_data_set
    __swig_getmethods__["user_data"] = _libntoh.ntoh_tcp_segment_t_user_data_get
    if _newclass:
        user_data = _swig_property(_libntoh.ntoh_tcp_segment_t_user_data_get, _libntoh.ntoh_tcp_segment_t_user_data_set)

    def __init__(self):
        this = _libntoh.new_ntoh_tcp_segment_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_tcp_segment_t
    __del__ = lambda self: None
ntoh_tcp_segment_t_swigregister = _libntoh.ntoh_tcp_segment_t_swigregister
ntoh_tcp_segment_t_swigregister(ntoh_tcp_segment_t)

class ntoh_tcp_peer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_tcp_peer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_tcp_peer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _libntoh.ntoh_tcp_peer_t_addr_set
    __swig_getmethods__["addr"] = _libntoh.ntoh_tcp_peer_t_addr_get
    if _newclass:
        addr = _swig_property(_libntoh.ntoh_tcp_peer_t_addr_get, _libntoh.ntoh_tcp_peer_t_addr_set)
    __swig_setmethods__["port"] = _libntoh.ntoh_tcp_peer_t_port_set
    __swig_getmethods__["port"] = _libntoh.ntoh_tcp_peer_t_port_get
    if _newclass:
        port = _swig_property(_libntoh.ntoh_tcp_peer_t_port_get, _libntoh.ntoh_tcp_peer_t_port_set)
    __swig_setmethods__["isn"] = _libntoh.ntoh_tcp_peer_t_isn_set
    __swig_getmethods__["isn"] = _libntoh.ntoh_tcp_peer_t_isn_get
    if _newclass:
        isn = _swig_property(_libntoh.ntoh_tcp_peer_t_isn_get, _libntoh.ntoh_tcp_peer_t_isn_set)
    __swig_setmethods__["ian"] = _libntoh.ntoh_tcp_peer_t_ian_set
    __swig_getmethods__["ian"] = _libntoh.ntoh_tcp_peer_t_ian_get
    if _newclass:
        ian = _swig_property(_libntoh.ntoh_tcp_peer_t_ian_get, _libntoh.ntoh_tcp_peer_t_ian_set)
    __swig_setmethods__["next_seq"] = _libntoh.ntoh_tcp_peer_t_next_seq_set
    __swig_getmethods__["next_seq"] = _libntoh.ntoh_tcp_peer_t_next_seq_get
    if _newclass:
        next_seq = _swig_property(_libntoh.ntoh_tcp_peer_t_next_seq_get, _libntoh.ntoh_tcp_peer_t_next_seq_set)
    __swig_setmethods__["final_seq"] = _libntoh.ntoh_tcp_peer_t_final_seq_set
    __swig_getmethods__["final_seq"] = _libntoh.ntoh_tcp_peer_t_final_seq_get
    if _newclass:
        final_seq = _swig_property(_libntoh.ntoh_tcp_peer_t_final_seq_get, _libntoh.ntoh_tcp_peer_t_final_seq_set)
    __swig_setmethods__["wsize"] = _libntoh.ntoh_tcp_peer_t_wsize_set
    __swig_getmethods__["wsize"] = _libntoh.ntoh_tcp_peer_t_wsize_get
    if _newclass:
        wsize = _swig_property(_libntoh.ntoh_tcp_peer_t_wsize_get, _libntoh.ntoh_tcp_peer_t_wsize_set)
    __swig_setmethods__["status"] = _libntoh.ntoh_tcp_peer_t_status_set
    __swig_getmethods__["status"] = _libntoh.ntoh_tcp_peer_t_status_get
    if _newclass:
        status = _swig_property(_libntoh.ntoh_tcp_peer_t_status_get, _libntoh.ntoh_tcp_peer_t_status_set)
    __swig_setmethods__["segments"] = _libntoh.ntoh_tcp_peer_t_segments_set
    __swig_getmethods__["segments"] = _libntoh.ntoh_tcp_peer_t_segments_get
    if _newclass:
        segments = _swig_property(_libntoh.ntoh_tcp_peer_t_segments_get, _libntoh.ntoh_tcp_peer_t_segments_set)
    __swig_setmethods__["mss"] = _libntoh.ntoh_tcp_peer_t_mss_set
    __swig_getmethods__["mss"] = _libntoh.ntoh_tcp_peer_t_mss_get
    if _newclass:
        mss = _swig_property(_libntoh.ntoh_tcp_peer_t_mss_get, _libntoh.ntoh_tcp_peer_t_mss_set)
    __swig_setmethods__["sack"] = _libntoh.ntoh_tcp_peer_t_sack_set
    __swig_getmethods__["sack"] = _libntoh.ntoh_tcp_peer_t_sack_get
    if _newclass:
        sack = _swig_property(_libntoh.ntoh_tcp_peer_t_sack_get, _libntoh.ntoh_tcp_peer_t_sack_set)
    __swig_setmethods__["wscale"] = _libntoh.ntoh_tcp_peer_t_wscale_set
    __swig_getmethods__["wscale"] = _libntoh.ntoh_tcp_peer_t_wscale_get
    if _newclass:
        wscale = _swig_property(_libntoh.ntoh_tcp_peer_t_wscale_get, _libntoh.ntoh_tcp_peer_t_wscale_set)
    __swig_setmethods__["totalwin"] = _libntoh.ntoh_tcp_peer_t_totalwin_set
    __swig_getmethods__["totalwin"] = _libntoh.ntoh_tcp_peer_t_totalwin_get
    if _newclass:
        totalwin = _swig_property(_libntoh.ntoh_tcp_peer_t_totalwin_get, _libntoh.ntoh_tcp_peer_t_totalwin_set)
    __swig_setmethods__["lastts"] = _libntoh.ntoh_tcp_peer_t_lastts_set
    __swig_getmethods__["lastts"] = _libntoh.ntoh_tcp_peer_t_lastts_get
    if _newclass:
        lastts = _swig_property(_libntoh.ntoh_tcp_peer_t_lastts_get, _libntoh.ntoh_tcp_peer_t_lastts_set)
    __swig_setmethods__["receive"] = _libntoh.ntoh_tcp_peer_t_receive_set
    __swig_getmethods__["receive"] = _libntoh.ntoh_tcp_peer_t_receive_get
    if _newclass:
        receive = _swig_property(_libntoh.ntoh_tcp_peer_t_receive_get, _libntoh.ntoh_tcp_peer_t_receive_set)

    def __init__(self):
        this = _libntoh.new_ntoh_tcp_peer_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_tcp_peer_t
    __del__ = lambda self: None
ntoh_tcp_peer_t_swigregister = _libntoh.ntoh_tcp_peer_t_swigregister
ntoh_tcp_peer_t_swigregister(ntoh_tcp_peer_t)

class ntoh_tcp_stream_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_tcp_stream_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_tcp_stream_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_tcp_stream_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_tcp_stream_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_tcp_stream_t_next_get, _libntoh.ntoh_tcp_stream_t_next_set)
    __swig_setmethods__["tuple"] = _libntoh.ntoh_tcp_stream_t_tuple_set
    __swig_getmethods__["tuple"] = _libntoh.ntoh_tcp_stream_t_tuple_get
    if _newclass:
        tuple = _swig_property(_libntoh.ntoh_tcp_stream_t_tuple_get, _libntoh.ntoh_tcp_stream_t_tuple_set)
    __swig_setmethods__["client"] = _libntoh.ntoh_tcp_stream_t_client_set
    __swig_getmethods__["client"] = _libntoh.ntoh_tcp_stream_t_client_get
    if _newclass:
        client = _swig_property(_libntoh.ntoh_tcp_stream_t_client_get, _libntoh.ntoh_tcp_stream_t_client_set)
    __swig_setmethods__["server"] = _libntoh.ntoh_tcp_stream_t_server_set
    __swig_getmethods__["server"] = _libntoh.ntoh_tcp_stream_t_server_get
    if _newclass:
        server = _swig_property(_libntoh.ntoh_tcp_stream_t_server_get, _libntoh.ntoh_tcp_stream_t_server_set)
    __swig_setmethods__["key"] = _libntoh.ntoh_tcp_stream_t_key_set
    __swig_getmethods__["key"] = _libntoh.ntoh_tcp_stream_t_key_get
    if _newclass:
        key = _swig_property(_libntoh.ntoh_tcp_stream_t_key_get, _libntoh.ntoh_tcp_stream_t_key_set)
    __swig_setmethods__["status"] = _libntoh.ntoh_tcp_stream_t_status_set
    __swig_getmethods__["status"] = _libntoh.ntoh_tcp_stream_t_status_get
    if _newclass:
        status = _swig_property(_libntoh.ntoh_tcp_stream_t_status_get, _libntoh.ntoh_tcp_stream_t_status_set)
    __swig_setmethods__["closedby"] = _libntoh.ntoh_tcp_stream_t_closedby_set
    __swig_getmethods__["closedby"] = _libntoh.ntoh_tcp_stream_t_closedby_get
    if _newclass:
        closedby = _swig_property(_libntoh.ntoh_tcp_stream_t_closedby_get, _libntoh.ntoh_tcp_stream_t_closedby_set)
    __swig_setmethods__["function"] = _libntoh.ntoh_tcp_stream_t_function_set
    __swig_getmethods__["function"] = _libntoh.ntoh_tcp_stream_t_function_get
    if _newclass:
        function = _swig_property(_libntoh.ntoh_tcp_stream_t_function_get, _libntoh.ntoh_tcp_stream_t_function_set)
    __swig_setmethods__["last_activ"] = _libntoh.ntoh_tcp_stream_t_last_activ_set
    __swig_getmethods__["last_activ"] = _libntoh.ntoh_tcp_stream_t_last_activ_get
    if _newclass:
        last_activ = _swig_property(_libntoh.ntoh_tcp_stream_t_last_activ_get, _libntoh.ntoh_tcp_stream_t_last_activ_set)
    __swig_setmethods__["syn_retries"] = _libntoh.ntoh_tcp_stream_t_syn_retries_set
    __swig_getmethods__["syn_retries"] = _libntoh.ntoh_tcp_stream_t_syn_retries_get
    if _newclass:
        syn_retries = _swig_property(_libntoh.ntoh_tcp_stream_t_syn_retries_get, _libntoh.ntoh_tcp_stream_t_syn_retries_set)
    __swig_setmethods__["synack_retries"] = _libntoh.ntoh_tcp_stream_t_synack_retries_set
    __swig_getmethods__["synack_retries"] = _libntoh.ntoh_tcp_stream_t_synack_retries_get
    if _newclass:
        synack_retries = _swig_property(_libntoh.ntoh_tcp_stream_t_synack_retries_get, _libntoh.ntoh_tcp_stream_t_synack_retries_set)
    __swig_setmethods__["udata"] = _libntoh.ntoh_tcp_stream_t_udata_set
    __swig_getmethods__["udata"] = _libntoh.ntoh_tcp_stream_t_udata_get
    if _newclass:
        udata = _swig_property(_libntoh.ntoh_tcp_stream_t_udata_get, _libntoh.ntoh_tcp_stream_t_udata_set)
    __swig_setmethods__["lock"] = _libntoh.ntoh_tcp_stream_t_lock_set
    __swig_getmethods__["lock"] = _libntoh.ntoh_tcp_stream_t_lock_get
    if _newclass:
        lock = _swig_property(_libntoh.ntoh_tcp_stream_t_lock_get, _libntoh.ntoh_tcp_stream_t_lock_set)
    __swig_setmethods__["enable_check_timeout"] = _libntoh.ntoh_tcp_stream_t_enable_check_timeout_set
    __swig_getmethods__["enable_check_timeout"] = _libntoh.ntoh_tcp_stream_t_enable_check_timeout_get
    if _newclass:
        enable_check_timeout = _swig_property(_libntoh.ntoh_tcp_stream_t_enable_check_timeout_get, _libntoh.ntoh_tcp_stream_t_enable_check_timeout_set)
    __swig_setmethods__["enable_check_nowindow"] = _libntoh.ntoh_tcp_stream_t_enable_check_nowindow_set
    __swig_getmethods__["enable_check_nowindow"] = _libntoh.ntoh_tcp_stream_t_enable_check_nowindow_get
    if _newclass:
        enable_check_nowindow = _swig_property(_libntoh.ntoh_tcp_stream_t_enable_check_nowindow_get, _libntoh.ntoh_tcp_stream_t_enable_check_nowindow_set)

    def __init__(self):
        this = _libntoh.new_ntoh_tcp_stream_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_tcp_stream_t
    __del__ = lambda self: None
ntoh_tcp_stream_t_swigregister = _libntoh.ntoh_tcp_stream_t_swigregister
ntoh_tcp_stream_t_swigregister(ntoh_tcp_stream_t)

class ntoh_tcp_session_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntoh_tcp_session_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntoh_tcp_session_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libntoh.ntoh_tcp_session_t_next_set
    __swig_getmethods__["next"] = _libntoh.ntoh_tcp_session_t_next_get
    if _newclass:
        next = _swig_property(_libntoh.ntoh_tcp_session_t_next_get, _libntoh.ntoh_tcp_session_t_next_set)
    __swig_setmethods__["max_streams"] = _libntoh.ntoh_tcp_session_t_max_streams_set
    __swig_getmethods__["max_streams"] = _libntoh.ntoh_tcp_session_t_max_streams_get
    if _newclass:
        max_streams = _swig_property(_libntoh.ntoh_tcp_session_t_max_streams_get, _libntoh.ntoh_tcp_session_t_max_streams_set)
    __swig_setmethods__["max_timewait"] = _libntoh.ntoh_tcp_session_t_max_timewait_set
    __swig_getmethods__["max_timewait"] = _libntoh.ntoh_tcp_session_t_max_timewait_get
    if _newclass:
        max_timewait = _swig_property(_libntoh.ntoh_tcp_session_t_max_timewait_get, _libntoh.ntoh_tcp_session_t_max_timewait_set)
    __swig_setmethods__["streams"] = _libntoh.ntoh_tcp_session_t_streams_set
    __swig_getmethods__["streams"] = _libntoh.ntoh_tcp_session_t_streams_get
    if _newclass:
        streams = _swig_property(_libntoh.ntoh_tcp_session_t_streams_get, _libntoh.ntoh_tcp_session_t_streams_set)
    __swig_setmethods__["timewait"] = _libntoh.ntoh_tcp_session_t_timewait_set
    __swig_getmethods__["timewait"] = _libntoh.ntoh_tcp_session_t_timewait_get
    if _newclass:
        timewait = _swig_property(_libntoh.ntoh_tcp_session_t_timewait_get, _libntoh.ntoh_tcp_session_t_timewait_set)
    __swig_setmethods__["rand"] = _libntoh.ntoh_tcp_session_t_rand_set
    __swig_getmethods__["rand"] = _libntoh.ntoh_tcp_session_t_rand_get
    if _newclass:
        rand = _swig_property(_libntoh.ntoh_tcp_session_t_rand_get, _libntoh.ntoh_tcp_session_t_rand_set)
    __swig_setmethods__["lock"] = _libntoh.ntoh_tcp_session_t_lock_set
    __swig_getmethods__["lock"] = _libntoh.ntoh_tcp_session_t_lock_get
    if _newclass:
        lock = _swig_property(_libntoh.ntoh_tcp_session_t_lock_get, _libntoh.ntoh_tcp_session_t_lock_set)
    __swig_setmethods__["tID"] = _libntoh.ntoh_tcp_session_t_tID_set
    __swig_getmethods__["tID"] = _libntoh.ntoh_tcp_session_t_tID_get
    if _newclass:
        tID = _swig_property(_libntoh.ntoh_tcp_session_t_tID_get, _libntoh.ntoh_tcp_session_t_tID_set)

    def __init__(self):
        this = _libntoh.new_ntoh_tcp_session_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libntoh.delete_ntoh_tcp_session_t
    __del__ = lambda self: None
ntoh_tcp_session_t_swigregister = _libntoh.ntoh_tcp_session_t_swigregister
ntoh_tcp_session_t_swigregister(ntoh_tcp_session_t)


_libntoh.DEFAULT_TCP_MAX_STREAMS_swigconstant(_libntoh)
DEFAULT_TCP_MAX_STREAMS = _libntoh.DEFAULT_TCP_MAX_STREAMS

_libntoh.DEFAULT_TCP_SYN_RETRIES_swigconstant(_libntoh)
DEFAULT_TCP_SYN_RETRIES = _libntoh.DEFAULT_TCP_SYN_RETRIES

_libntoh.DEFAULT_TCP_SYNACK_RETRIES_swigconstant(_libntoh)
DEFAULT_TCP_SYNACK_RETRIES = _libntoh.DEFAULT_TCP_SYNACK_RETRIES

_libntoh.DEFAULT_TCP_SYNSENT_TIMEOUT_swigconstant(_libntoh)
DEFAULT_TCP_SYNSENT_TIMEOUT = _libntoh.DEFAULT_TCP_SYNSENT_TIMEOUT

_libntoh.DEFAULT_TCP_SYNRCV_TIMEOUT_swigconstant(_libntoh)
DEFAULT_TCP_SYNRCV_TIMEOUT = _libntoh.DEFAULT_TCP_SYNRCV_TIMEOUT

_libntoh.DEFAULT_TCP_ESTABLISHED_TIMEOUT_swigconstant(_libntoh)
DEFAULT_TCP_ESTABLISHED_TIMEOUT = _libntoh.DEFAULT_TCP_ESTABLISHED_TIMEOUT

_libntoh.DEFAULT_TCP_FINWAIT2_TIMEOUT_swigconstant(_libntoh)
DEFAULT_TCP_FINWAIT2_TIMEOUT = _libntoh.DEFAULT_TCP_FINWAIT2_TIMEOUT

_libntoh.DEFAULT_TCP_TIMEWAIT_TIMEOUT_swigconstant(_libntoh)
DEFAULT_TCP_TIMEWAIT_TIMEOUT = _libntoh.DEFAULT_TCP_TIMEWAIT_TIMEOUT

_libntoh.DEFAULT_TIMEOUT_DELAY_swigconstant(_libntoh)
DEFAULT_TIMEOUT_DELAY = _libntoh.DEFAULT_TIMEOUT_DELAY

def ntoh_tcp_init():
    return _libntoh.ntoh_tcp_init()
ntoh_tcp_init = _libntoh.ntoh_tcp_init

def ntoh_tcp_exit():
    return _libntoh.ntoh_tcp_exit()
ntoh_tcp_exit = _libntoh.ntoh_tcp_exit

def ntoh_tcp_new_session(max_streams, max_timewait, error):
    return _libntoh.ntoh_tcp_new_session(max_streams, max_timewait, error)
ntoh_tcp_new_session = _libntoh.ntoh_tcp_new_session

def ntoh_tcp_free_session(session):
    return _libntoh.ntoh_tcp_free_session(session)
ntoh_tcp_free_session = _libntoh.ntoh_tcp_free_session

def ntoh_tcp_free_stream(session, stream, reason, extra):
    return _libntoh.ntoh_tcp_free_stream(session, stream, reason, extra)
ntoh_tcp_free_stream = _libntoh.ntoh_tcp_free_stream

def ntoh_tcp_find_stream(session, tuple5):
    return _libntoh.ntoh_tcp_find_stream(session, tuple5)
ntoh_tcp_find_stream = _libntoh.ntoh_tcp_find_stream

def ntoh_tcp_new_stream(session, tuple5, function, udata, error, enable_check_timeout, enable_check_nowindow):
    return _libntoh.ntoh_tcp_new_stream(session, tuple5, function, udata, error, enable_check_timeout, enable_check_nowindow)
ntoh_tcp_new_stream = _libntoh.ntoh_tcp_new_stream

def ntoh_tcp_count_streams(session):
    return _libntoh.ntoh_tcp_count_streams(session)
ntoh_tcp_count_streams = _libntoh.ntoh_tcp_count_streams

def ntoh_tcp_add_segment(session, stream, ip, len, udata):
    return _libntoh.ntoh_tcp_add_segment(session, stream, ip, len, udata)
ntoh_tcp_add_segment = _libntoh.ntoh_tcp_add_segment

def ntoh_tcp_get_status(status):
    return _libntoh.ntoh_tcp_get_status(status)
ntoh_tcp_get_status = _libntoh.ntoh_tcp_get_status

def ntoh_tcp_get_size(session):
    return _libntoh.ntoh_tcp_get_size(session)
ntoh_tcp_get_size = _libntoh.ntoh_tcp_get_size

def ntoh_tcp_get_tuple5(ip, tcp, tuple):
    return _libntoh.ntoh_tcp_get_tuple5(ip, tcp, tuple)
ntoh_tcp_get_tuple5 = _libntoh.ntoh_tcp_get_tuple5
# This file is compatible with both classic and new-style classes.


